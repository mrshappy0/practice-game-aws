"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("@aws-cdk/assert");
const cdk = require("@aws-cdk/core");
const lambda = require("@aws-cdk/aws-lambda");
// import * as IpAwsTurnBasedGame from '../lib/ip-aws-turn-based-game-stack';
const heapgame_1 = require("../lib/heapgame");
test("DynamoDB Table Created", () => {
    const stack = new cdk.Stack();
    // WHEN
    new heapgame_1.HeapGame(stack, "MyTestConstruct", {
        downstream: new lambda.Function(stack, "TestFunction", {
            runtime: lambda.Runtime.NODEJS_10_X,
            handler: "lambda.handler",
            code: lambda.Code.fromInline("test"),
        }),
    });
    // THEN
    assert_1.expect(stack).to(assert_1.haveResource("AWS::DynamoDB::Table"));
});
test("Lambda Has Environment Variables", () => {
    const stack = new cdk.Stack();
    // WHEN
    new heapgame_1.HeapGame(stack, "MyTestConstruct", {
        downstream: new lambda.Function(stack, "TestFunction", {
            runtime: lambda.Runtime.NODEJS_10_X,
            handler: "lambda.handler",
            code: lambda.Code.inline("test"),
        }),
    });
    // THEN
    assert_1.expect(stack).to(assert_1.haveResource("AWS::Lambda::Function", {
        Environment: {
            Variables: {
                DOWNSTREAM_FUNCTION_NAME: {
                    Ref: "TestFunction22AD90FC",
                },
                HITS_TABLE_NAME: {
                    Ref: "MyTestConstructHits24A357F0",
                },
            },
        },
    }));
});
test("DynamoDB Table Created With Encryption", () => {
    const stack = new cdk.Stack();
    // WHEN
    new heapgame_1.HeapGame(stack, "MyTestConstruct", {
        downstream: new lambda.Function(stack, "TestFunction", {
            runtime: lambda.Runtime.NODEJS_10_X,
            handler: "lambda.handler",
            code: lambda.Code.inline("test"),
        }),
    });
    // THEN
    assert_1.expect(stack).to(assert_1.haveResource("AWS::DynamoDB::Table", {
        SSESpecification: {
            SSEEnabled: true,
        },
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXAtYXdzLXR1cm4tYmFzZWQtZ2FtZS50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaXAtYXdzLXR1cm4tYmFzZWQtZ2FtZS50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNENBQW9FO0FBQ3BFLHFDQUFxQztBQUNyQyw4Q0FBOEM7QUFDOUMsNkVBQTZFO0FBRTdFLDhDQUEyQztBQUUzQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsR0FBRyxFQUFFO0lBQ2xDLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzlCLE9BQU87SUFDUCxJQUFJLG1CQUFRLENBQUMsS0FBSyxFQUFFLGlCQUFpQixFQUFFO1FBQ3JDLFVBQVUsRUFBRSxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLGNBQWMsRUFBRTtZQUNyRCxPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXO1lBQ25DLE9BQU8sRUFBRSxnQkFBZ0I7WUFDekIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQztTQUNyQyxDQUFDO0tBQ0gsQ0FBQyxDQUFDO0lBQ0gsT0FBTztJQUNQLGVBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMscUJBQVksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUM7QUFDNUQsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsa0NBQWtDLEVBQUUsR0FBRyxFQUFFO0lBQzVDLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzlCLE9BQU87SUFDUCxJQUFJLG1CQUFRLENBQUMsS0FBSyxFQUFFLGlCQUFpQixFQUFFO1FBQ3JDLFVBQVUsRUFBRSxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLGNBQWMsRUFBRTtZQUNyRCxPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXO1lBQ25DLE9BQU8sRUFBRSxnQkFBZ0I7WUFDekIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztTQUNqQyxDQUFDO0tBQ0gsQ0FBQyxDQUFDO0lBQ0gsT0FBTztJQUNQLGVBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQ2pCLHFCQUFZLENBQUMsdUJBQXVCLEVBQUU7UUFDcEMsV0FBVyxFQUFFO1lBQ1gsU0FBUyxFQUFFO2dCQUNULHdCQUF3QixFQUFFO29CQUN4QixHQUFHLEVBQUUsc0JBQXNCO2lCQUM1QjtnQkFDRCxlQUFlLEVBQUU7b0JBQ2YsR0FBRyxFQUFFLDZCQUE2QjtpQkFDbkM7YUFDRjtTQUNGO0tBQ0YsQ0FBQyxDQUNILENBQUM7QUFDSixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyx3Q0FBd0MsRUFBRSxHQUFHLEVBQUU7SUFDbEQsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDOUIsT0FBTztJQUNQLElBQUksbUJBQVEsQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLEVBQUU7UUFDckMsVUFBVSxFQUFFLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsY0FBYyxFQUFFO1lBQ3JELE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVc7WUFDbkMsT0FBTyxFQUFFLGdCQUFnQjtZQUN6QixJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1NBQ2pDLENBQUM7S0FDSCxDQUFDLENBQUM7SUFDSCxPQUFPO0lBQ1AsZUFBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FDakIscUJBQVksQ0FBQyxzQkFBc0IsRUFBRTtRQUNuQyxnQkFBZ0IsRUFBRTtZQUNoQixVQUFVLEVBQUUsSUFBSTtTQUNqQjtLQUNGLENBQUMsQ0FDSCxDQUFDO0FBQ0osQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleHBlY3QgYXMgZXhwZWN0Q0RLLCBoYXZlUmVzb3VyY2UgfSBmcm9tIFwiQGF3cy1jZGsvYXNzZXJ0XCI7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSBcIkBhd3MtY2RrL2NvcmVcIjtcbmltcG9ydCAqIGFzIGxhbWJkYSBmcm9tIFwiQGF3cy1jZGsvYXdzLWxhbWJkYVwiO1xuLy8gaW1wb3J0ICogYXMgSXBBd3NUdXJuQmFzZWRHYW1lIGZyb20gJy4uL2xpYi9pcC1hd3MtdHVybi1iYXNlZC1nYW1lLXN0YWNrJztcblxuaW1wb3J0IHsgSGVhcEdhbWUgfSBmcm9tIFwiLi4vbGliL2hlYXBnYW1lXCI7XG5cbnRlc3QoXCJEeW5hbW9EQiBUYWJsZSBDcmVhdGVkXCIsICgpID0+IHtcbiAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gIC8vIFdIRU5cbiAgbmV3IEhlYXBHYW1lKHN0YWNrLCBcIk15VGVzdENvbnN0cnVjdFwiLCB7XG4gICAgZG93bnN0cmVhbTogbmV3IGxhbWJkYS5GdW5jdGlvbihzdGFjaywgXCJUZXN0RnVuY3Rpb25cIiwge1xuICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzEwX1gsXG4gICAgICBoYW5kbGVyOiBcImxhbWJkYS5oYW5kbGVyXCIsXG4gICAgICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tSW5saW5lKFwidGVzdFwiKSxcbiAgICB9KSxcbiAgfSk7XG4gIC8vIFRIRU5cbiAgZXhwZWN0Q0RLKHN0YWNrKS50byhoYXZlUmVzb3VyY2UoXCJBV1M6OkR5bmFtb0RCOjpUYWJsZVwiKSk7XG59KTtcblxudGVzdChcIkxhbWJkYSBIYXMgRW52aXJvbm1lbnQgVmFyaWFibGVzXCIsICgpID0+IHtcbiAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG4gIC8vIFdIRU5cbiAgbmV3IEhlYXBHYW1lKHN0YWNrLCBcIk15VGVzdENvbnN0cnVjdFwiLCB7XG4gICAgZG93bnN0cmVhbTogbmV3IGxhbWJkYS5GdW5jdGlvbihzdGFjaywgXCJUZXN0RnVuY3Rpb25cIiwge1xuICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzEwX1gsXG4gICAgICBoYW5kbGVyOiBcImxhbWJkYS5oYW5kbGVyXCIsXG4gICAgICBjb2RlOiBsYW1iZGEuQ29kZS5pbmxpbmUoXCJ0ZXN0XCIpLFxuICAgIH0pLFxuICB9KTtcbiAgLy8gVEhFTlxuICBleHBlY3RDREsoc3RhY2spLnRvKFxuICAgIGhhdmVSZXNvdXJjZShcIkFXUzo6TGFtYmRhOjpGdW5jdGlvblwiLCB7XG4gICAgICBFbnZpcm9ubWVudDoge1xuICAgICAgICBWYXJpYWJsZXM6IHtcbiAgICAgICAgICBET1dOU1RSRUFNX0ZVTkNUSU9OX05BTUU6IHtcbiAgICAgICAgICAgIFJlZjogXCJUZXN0RnVuY3Rpb24yMkFEOTBGQ1wiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgSElUU19UQUJMRV9OQU1FOiB7XG4gICAgICAgICAgICBSZWY6IFwiTXlUZXN0Q29uc3RydWN0SGl0czI0QTM1N0YwXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSlcbiAgKTtcbn0pO1xuXG50ZXN0KFwiRHluYW1vREIgVGFibGUgQ3JlYXRlZCBXaXRoIEVuY3J5cHRpb25cIiwgKCkgPT4ge1xuICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgLy8gV0hFTlxuICBuZXcgSGVhcEdhbWUoc3RhY2ssIFwiTXlUZXN0Q29uc3RydWN0XCIsIHtcbiAgICBkb3duc3RyZWFtOiBuZXcgbGFtYmRhLkZ1bmN0aW9uKHN0YWNrLCBcIlRlc3RGdW5jdGlvblwiLCB7XG4gICAgICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5OT0RFSlNfMTBfWCxcbiAgICAgIGhhbmRsZXI6IFwibGFtYmRhLmhhbmRsZXJcIixcbiAgICAgIGNvZGU6IGxhbWJkYS5Db2RlLmlubGluZShcInRlc3RcIiksXG4gICAgfSksXG4gIH0pO1xuICAvLyBUSEVOXG4gIGV4cGVjdENESyhzdGFjaykudG8oXG4gICAgaGF2ZVJlc291cmNlKFwiQVdTOjpEeW5hbW9EQjo6VGFibGVcIiwge1xuICAgICAgU1NFU3BlY2lmaWNhdGlvbjoge1xuICAgICAgICBTU0VFbmFibGVkOiB0cnVlLFxuICAgICAgfSxcbiAgICB9KVxuICApO1xufSk7XG4iXX0=